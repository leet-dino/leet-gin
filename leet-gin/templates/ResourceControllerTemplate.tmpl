package controllers

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"{{.ModName}}/models"
	"{{.ModName}}/helper"
)

type {{ .Name }} struct {
}

var ()


func ({{.Name}}) Index(app *gin.Context) {
	page := app.Query("page")
	limit := app.Query("limit")

	// Set default values if not provided
	if page == "" {
		page = "1"
	}
	if limit == "" {
		limit = "10"
	}

	// Convert page and limit to integers
	pageInt := helper.ConvertToInt(page)
	limitInt := helper.ConvertToInt(limit)

	// Retrieve the list from the model with pagination
	var {{.ModelName}} models.{{.ModelName}}
	list, totalCount, err := {{.ModelName}}.GetList(pageInt, limitInt)
	if err != nil {
		app.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{
			"error": "Failed to retrieve {{.ModelName}} list",
		})
		return
	}

	// Prepare the response
	response := gin.H{
		"list":       list,
		"page":       pageInt,
		"limit":      limitInt,
		"totalCount": totalCount,
	}

	app.JSON(http.StatusOK, response)
}

func ({{.Name}}) Create(app *gin.Context) {
	// Handle create operation using GORM and {{.ModelName}} model
	var {{.ModelName}} models.{{.ModelName}}
	app.BindJSON(&{{.ModelName}})
	err := {{.ModelName}}.Create(&{{.ModelName}})
	if err != nil {
		app.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{
			"error": "Failed to create record",
		})
		return
	}

	app.IndentedJSON(http.StatusOK, {{.ModelName}})
}

func ({{.Name}}) Read(app *gin.Context) {
	// Handle read operation using GORM and {{.ModelName}} model
	var {{.ModelName}} models.{{.ModelName}}

	id := uuid.MustParse(app.Param("id"))
	result, err := {{.ModelName}}.GetByID(id)
	if err != nil {
		app.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{
			"error": "Failed to read record",
		})
		return
	}

	app.IndentedJSON(http.StatusOK, result)
}

func ({{.Name}}) Update(app *gin.Context) {
	// Handle update operation using GORM and {{.ModelName}} model
	var {{.ModelName}} models.{{.ModelName}}

	id := uuid.MustParse(app.Param("id"))

	app.BindJSON(&{{.ModelName}})

	err := {{.ModelName}}.Update(&{{.ModelName}}, id)
	if err != nil {
		app.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{
			"error": "Failed to update record",
		})
		return
	}

	result, err := {{.ModelName}}.GetByID(id)
	if err != nil {
		app.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{
			"error": "Failed to read record",
		})
		return
	}

	app.IndentedJSON(http.StatusOK, result)
}

func ({{.Name}}) Delete(app *gin.Context) {
	// Handle delete operation using GORM and {{.ModelName}} model
	var {{.ModelName}} models.{{.ModelName}}

	id := uuid.MustParse(app.Param("id"))
	err := {{.ModelName}}.Delete(id)
	if err != nil {
		if err.Error() == "record not found" {
			app.AbortWithStatusJSON(http.StatusNotFound, gin.H{
				"error": "Failed to delete, record not found",
			})
		} else {
			app.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{
				"error": "Failed to delete record",
			})
		}
		return
	}

	app.IndentedJSON(http.StatusOK, "Delete Successfully")
}
